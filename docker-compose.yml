services:
  db:
    image: postgis/postgis:15-3.4
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: mydatabase
      TZ: "Asia/Seoul"
    expose:
      - "5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 20s   # ← 초기 기동 유예

  migrator:
    image: postgis/postgis:15-3.4
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
      PGHOST: "db"
      PGPORT: "5432"
      PGUSER: "postgres"
      PGDATABASE: "mydatabase"
      RUN_SEED: "true"
    volumes:
      - ./migrations:/migrations:ro
      - ./scripts:/scripts:ro
    networks:
      - app-network
    entrypoint: ["/scripts/migrate.sh"]

  app:
    image: ${BE_ECR_REGISTRY}/${BE_ECR_REPOSITORY}:${BE_IMAGE_TAG:-latest}
    container_name: shutter-heroes-api
    depends_on:
      migrator:
        condition: service_completed_successfully
    expose:
      - "8080"
    environment:
      # Spring Profile
      - SPRING_PROFILES_ACTIVE=dev

      # Database Configuration
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/mydatabase
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=app

      # OAuth2 Kakao
      - SPRING_SECURITY_OAUTH2_URI_BASE=https://shutter-heroes.site
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_REDIRECT_URI=https://api.shutter-heroes.site/login/oauth2/code/kakao
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}

      # JWT
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}

      # AWS S3
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}

    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health-check"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s

  frontend:
    image: ${FE_ECR_REGISTRY}/${FE_ECR_REPOSITORY}:${FE_IMAGE_TAG:-latest}
    container_name: shutter-heroes-fe
    restart: unless-stopped
    expose:
      - "3000"
    networks:
      - app-network
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=https://api.shutter-heroes.site
    depends_on:
      app:
        condition: service_healthy

  yolo-inference:
    image: ${FASTAPI_ECR_REGISTRY}/${FASTAPI_ECR_REPOSITORY}:${FASTAPI_IMAGE_TAG:-latest}
    container_name: yolo-fastapi
    expose:
      - "8000"
    environment:
      # 모델 설정
      - MODEL_PATH=${MODEL_PATH:-best.pt}
      - DEVICE=${DEVICE:-cpu}
      - IMGSZ=${IMGSZ:-640}
      - CONF=${CONF:-0.25}
      - IOU=${IOU:-0.45}

      # 동시성 제어
      - MAX_INFLIGHT=${MAX_INFLIGHT:-2}

      # 인증 (옵션)
      - INBOUND_TOKEN=${INBOUND_TOKEN:-}
      - SHARED_SECRET=${SHARED_SECRET:-}

      # 기타 설정
      - POST_TIMEOUT=${POST_TIMEOUT:-60}

      # AWS S3 (비활성화 - 공개 URL 사용)
      # - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-ap-northeast-2}
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}

    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/healthz')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # GPU 버전 사용 시 주석 해제
  # (nvidia-docker 및 docker-compose v1.28+ 필요)
  #   yolo-inference-gpu:
  #     build:
  #       context: .
  #       dockerfile: Dockerfile.gpu
  #     container_name: yolo-fastapi-gpu
  #     ports:
  #       - "8001:8000"
  #     environment:
  #       - MODEL_PATH=${MODEL_PATH:-best.pt}
  #       - DEVICE=cuda:0
  #       # ... (위와 동일한 환경 변수)
  #     deploy:
  #       resources:
  #         reservations:
  #           devices:
  #             - driver: nvidia
  #               count: 1
  #               capabilities: [gpu]
  #     restart: unless-stopped

  nginx:
    image: nginx:latest
    container_name: shutter-heroes-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./data/certbot/conf:/etc/letsencrypt:ro
      - ./data/certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - app
      - yolo-inference
    networks:
      - app-network
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot:latest
    container_name: shutter-heroes-certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --quiet; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
